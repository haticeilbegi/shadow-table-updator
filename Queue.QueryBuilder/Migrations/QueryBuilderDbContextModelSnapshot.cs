// <auto-generated />
using System;
using Queue.QueryBuilder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Queue.QueryBuilder.Migrations
{
    [DbContext(typeof(QueryBuilderDbContext))]
    partial class QueryBuilderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Column", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<bool>("IsNumeric")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("TableId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("TableId");

                b.ToTable("Columns");

                b.HasData(
                    new
                    {
                        Id = new Guid("0b6c2448-6104-469d-841d-28b21e3fbcc9"),
                        IsNumeric = true,
                        Name = "Id",
                        TableId = new Guid("e7b28b74-afb7-4e71-b546-69208c3bc72c")
                    },
                    new
                    {
                        Id = new Guid("0871a44b-4502-46c5-9fc5-ec695a4e5d62"),
                        IsNumeric = false,
                        Name = "Code",
                        TableId = new Guid("e7b28b74-afb7-4e71-b546-69208c3bc72c")
                    },
                    new
                    {
                        Id = new Guid("2de28a51-da57-4a08-9173-e2abe5bc5f31"),
                        IsNumeric = false,
                        Name = "Name",
                        TableId = new Guid("e7b28b74-afb7-4e71-b546-69208c3bc72c")
                    },
                    new
                    {
                        Id = new Guid("9bdb0cf5-6c9e-4233-963b-766dd9423e33"),
                        IsNumeric = false,
                        Name = "Symbol",
                        TableId = new Guid("e7b28b74-afb7-4e71-b546-69208c3bc72c")
                    },
                    new
                    {
                        Id = new Guid("e4ad2ffd-8496-49d6-b230-e99d79fdd046"),
                        IsNumeric = true,
                        Name = "Id",
                        TableId = new Guid("a96a54c8-ea74-4a0c-863b-f6a352987f68")
                    },
                    new
                    {
                        Id = new Guid("3601d63c-f3ad-4c63-9a25-1662c7c73709"),
                        IsNumeric = false,
                        Name = "Code",
                        TableId = new Guid("a96a54c8-ea74-4a0c-863b-f6a352987f68")
                    },
                    new
                    {
                        Id = new Guid("e26b3981-d685-4152-83e7-33498e68e392"),
                        IsNumeric = false,
                        Name = "Name",
                        TableId = new Guid("a96a54c8-ea74-4a0c-863b-f6a352987f68")
                    },
                    new
                    {
                        Id = new Guid("02a12d45-9fc1-46ab-98ef-1360b5955c65"),
                        IsNumeric = false,
                        Name = "Symbol",
                        TableId = new Guid("a96a54c8-ea74-4a0c-863b-f6a352987f68")
                    });
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Database", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("ModuleId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Password")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Server")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("User")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ModuleId");

                b.ToTable("Databases");

                b.HasData(
                    new
                    {
                        Id = new Guid("9300b4a1-1686-4cdb-88d8-2d55dc52f8da"),
                        ModuleId = new Guid("0d355012-e67f-47d2-8637-c3fdf80affe0"),
                        Name = "tenant_dev",
                        Password = "P5-4x/vR+",
                        Server = "nctestdb01.e-cozum.com",
                        User = "tenant_dev"
                    },
                    new
                    {
                        Id = new Guid("2be20fd1-411a-4a48-bf0b-1404c5ee312d"),
                        ModuleId = new Guid("4c1ebf36-c5e5-42f1-876d-f17b2e9b5f8d"),
                        Name = "nte_dev",
                        Password = "Hatice123",
                        Server = "(local)",
                        User = "sa"
                    });
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Module", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Modules");

                b.HasData(
                    new
                    {
                        Id = new Guid("0d355012-e67f-47d2-8637-c3fdf80affe0"),
                        Name = "Ortak"
                    },
                    new
                    {
                        Id = new Guid("4c1ebf36-c5e5-42f1-876d-f17b2e9b5f8d"),
                        Name = "NTE"
                    });
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Query", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("AuditType")
                    .HasColumnType("int");

                b.Property<string>("CommandText")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Queries");

                b.HasData(
                    new
                    {
                        Id = new Guid("3963623e-3992-4ee5-950e-74738688d3b7"),
                        AuditType = 0,
                        CommandText = "INSERT INTO [{#DATABASE#}].[{#SCHEMA#}].[{#TABLE#}] ( {#COLUMNS#} ) VALUES ( {#VALUES#} )"
                    },
                    new
                    {
                        Id = new Guid("10ae65a0-b02f-4025-9db0-58baaeed49ba"),
                        AuditType = 1,
                        CommandText = "UPDATE [{#DATABASE#}].[{#SCHEMA#}].[{#TABLE#}] SET {#COLUMNS#} WHERE {#CONDITION#}"
                    },
                    new
                    {
                        Id = new Guid("37cdea2b-c762-4e4e-97e6-19f068aa4379"),
                        AuditType = 2,
                        CommandText = "UPDATE [{#DATABASE#}].[{#SCHEMA#}].[{#TABLE#}] SET {#COLUMN#} = {#VALUE#} WHERE {#CONDITION#}"
                    },
                    new
                    {
                        Id = new Guid("0bc5e0e0-fbed-4c66-a2bd-8f13caca07f7"),
                        AuditType = 3,
                        CommandText = "DELETE FROM [{#DATABASE#}].[{#SCHEMA#}].[{#TABLE#}] WHERE {#CONDITION#}"
                    });
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Schema", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("DatabaseId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("DatabaseId");

                b.ToTable("Schemas");

                b.HasData(
                    new
                    {
                        Id = new Guid("51cad30e-a3f0-4dc4-80f2-d529d66152dc"),
                        DatabaseId = new Guid("9300b4a1-1686-4cdb-88d8-2d55dc52f8da"),
                        Name = "dbo"
                    },
                    new
                    {
                        Id = new Guid("af227557-af3d-4763-9397-6f5d7f90e519"),
                        DatabaseId = new Guid("2be20fd1-411a-4a48-bf0b-1404c5ee312d"),
                        Name = "dbo"
                    });
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Table", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("OriginalTableId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("SchemaId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("OriginalTableId");

                b.HasIndex("SchemaId");

                b.ToTable("Tables");

                b.HasData(
                    new
                    {
                        Id = new Guid("e7b28b74-afb7-4e71-b546-69208c3bc72c"),
                        Name = "Currencies",
                        SchemaId = new Guid("51cad30e-a3f0-4dc4-80f2-d529d66152dc")
                    },
                    new
                    {
                        Id = new Guid("a96a54c8-ea74-4a0c-863b-f6a352987f68"),
                        Name = "Currencies",
                        OriginalTableId = new Guid("e7b28b74-afb7-4e71-b546-69208c3bc72c"),
                        SchemaId = new Guid("af227557-af3d-4763-9397-6f5d7f90e519")
                    });
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Column", b =>
            {
                b.HasOne("ECozum.Queue.QueryBuilder.Data.Table", "Table")
                    .WithMany("Columns")
                    .HasForeignKey("TableId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Database", b =>
            {
                b.HasOne("ECozum.Queue.QueryBuilder.Data.Module", "Module")
                    .WithMany("Databases")
                    .HasForeignKey("ModuleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Schema", b =>
            {
                b.HasOne("ECozum.Queue.QueryBuilder.Data.Database", "Database")
                    .WithMany("Schemas")
                    .HasForeignKey("DatabaseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ECozum.Queue.QueryBuilder.Data.Table", b =>
            {
                b.HasOne("ECozum.Queue.QueryBuilder.Data.Table", "OriginalTable")
                    .WithMany("Shadows")
                    .HasForeignKey("OriginalTableId");

                b.HasOne("ECozum.Queue.QueryBuilder.Data.Schema", "Schema")
                    .WithMany("Tables")
                    .HasForeignKey("SchemaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
